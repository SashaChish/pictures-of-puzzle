{"version":3,"sources":["serviceWorker.js","componens/StickySlider/Slide.js","componens/StickySlider/StickiSliders.js","componens/Puzzle/BoardShuffle.js","componens/Loader/Loader.js","componens/Puzzle/BoardForPlay.js","componens/Buttons/Buttons.js","componens/Puzzle/PuzzleBoards.js","utils/shuffle.js","data/puzzleOptions.js","App.js","data/api.js","index.js"],"names":["Boolean","window","location","hostname","match","Slide","this","props","url","id","title","changeImg","className","onClick","bind","style","backgroundImage","React","Component","StickySlider","goEnd","current","swiperRef","groupEnd","images","length","swiper","slideTo","goStart","createRef","slidesPerView","slidesPerGroup","spaceBetween","grabCursor","observer","effect","coverflowEffect","rotate","stretch","depth","modifier","slideShadows","pagination","el","type","navigation","nextEl","prevEl","ref","map","img","key","tags","split","BoardShuffle","position","options","item","takeCell","styles","backgroundPosition","Loader","BoardForPlay","fokus","e","preventDefault","target","classList","add","outFokus","remove","dropCell","switchCell","onMouseDown","onMouseUp","onMouseOver","onMouseOut","Buttons","perPage","clearCellPuzzle","morePictures","disabled","PuzzleBoards","values","takeCellImg","dropCellImg","takeCellGameBoard","switchCellGameBoard","shuffledSize","width","shuffleOptions","height","targetURL","option","shuffle","arr","j","temp","newArray","i","Math","floor","random","App","getImages","fetch","then","response","json","hits","hit","webformatURL","setState","state","changeImgOnClick","find","active","stylesCell","filter","switchId","switchOptions","setTimeout","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a9f4bfec.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Slide extends React.Component {\r\n  render() {\r\n    const { url, id, title, changeImg } = this.props\r\n\r\n    if (url) {\r\n      return (\r\n        <div className=\"container-sticky-slider\">\r\n          <div\r\n            className=\"content-sticky-slider\"\r\n            onClick={changeImg.bind(null, id)}\r\n            style={{ backgroundImage: `url(${url})` }}\r\n          />\r\n          <div className=\"footer-sticky-slider\">{title}</div>\r\n        </div>\r\n      )\r\n    } else return\r\n  }\r\n}\r\n\r\nSlide.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n  id: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  changeImg: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Slide\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Swiper from 'react-id-swiper'\r\nimport 'swiper//css/swiper.css'\r\nimport Slide from './Slide'\r\n\r\nclass StickySlider extends React.Component {\r\n  constructor() {\r\n    super()\r\n\r\n    this.swiperRef = React.createRef()\r\n  }\r\n\r\n  goEnd = () => {\r\n    const { current } = this.swiperRef\r\n    const groupEnd = this.props.images.length\r\n\r\n    if (current && current.swiper) {\r\n      current.swiper.slideTo(groupEnd)\r\n    }\r\n  }\r\n\r\n  goStart = () => {\r\n    const { current } = this.swiperRef\r\n    const groupStart = 0\r\n\r\n    if (current && current.swiper) {\r\n      current.swiper.slideTo(groupStart)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { images, changeImg } = this.props\r\n\r\n    const params = {\r\n      slidesPerView: 4,\r\n      slidesPerGroup: 2,\r\n      spaceBetween: 40,\r\n      grabCursor: true,\r\n      observer: true,\r\n      effect: 'coverflow',\r\n      coverflowEffect: {\r\n        rotate: 30,\r\n        stretch: 10,\r\n        depth: 50,\r\n        modifier: 1,\r\n        slideShadows: false,\r\n      },\r\n      pagination: {\r\n        el: '.swiper-pagination',\r\n        type: 'fraction',\r\n      },\r\n      navigation: {\r\n        nextEl: '.swiper-button-next.swiper-button-black',\r\n        prevEl: '.swiper-button-prev.swiper-button-black',\r\n      },\r\n    }\r\n\r\n    return (\r\n      <div className=\"margin-top\">\r\n        <Swiper {...params} ref={this.swiperRef}>\r\n          {images.map(img => (\r\n            <div key={img.id}>\r\n              <Slide\r\n                url={img.url}\r\n                title={img.tags.split(',')[0]}\r\n                id={img.id}\r\n                changeImg={changeImg}\r\n              ></Slide>\r\n            </div>\r\n          ))}\r\n        </Swiper>\r\n        <div className=\"swiper-button-container\"> \r\n          <button type=\"button\" className=\"button-swiper\" onClick={this.goStart}>\r\n            Start\r\n          </button>\r\n          <button type=\"button\" className=\"button-swiper\" onClick={this.goEnd}>End</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nStickySlider.propTypes = {\r\n  images: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  changeImg: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default StickySlider\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass BoardShuffle extends React.Component {\r\n  render() {\r\n    const {\r\n      url,\r\n      id,\r\n      options: {\r\n        item: { position },\r\n      },\r\n      takeCell,\r\n    } = this.props\r\n\r\n    const styles = {\r\n      backgroundImage: url,\r\n      backgroundPosition: position,\r\n    }\r\n\r\n    return (\r\n      <div className=\"cell\" style={styles} onClick={takeCell.bind(null, id)} />\r\n    )\r\n  }\r\n}\r\n\r\nBoardShuffle.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n  id: PropTypes.number.isRequired,\r\n  position: PropTypes.string,\r\n  takeCell: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default BoardShuffle\r\n","import React from 'react'\r\n\r\nfunction Loader() {\r\n  return (\r\n    <div className=\"lds-ripple\">\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass BoardForPlay extends React.Component {\r\n  fokus = e => {\r\n    e.preventDefault()\r\n    e.target.classList.add('cell-fokus')\r\n  }\r\n\r\n  outFokus = e => e.target.classList.remove('cell-fokus')\r\n\r\n  render() {\r\n    const { id, dropCell, takeCell, switchCell } = this.props\r\n\r\n    return (\r\n      <div\r\n        className=\"cell border\"\r\n        onClick={dropCell}\r\n        onMouseDown={takeCell.bind(null, id)}\r\n        onMouseUp={switchCell.bind(null, id)}\r\n        onMouseOver={this.fokus}\r\n        onMouseOut={this.outFokus}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nBoardForPlay.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  dropCell: PropTypes.func.isRequired,\r\n  takeCell: PropTypes.func.isRequired,\r\n  switchCell: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default BoardForPlay\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Buttons extends React.Component {\r\n  render() {\r\n    const { perPage, clearCellPuzzle, morePictures } = this.props\r\n\r\n    const disabled = perPage <= 100 ? false : true\r\n\r\n    return (\r\n      <div className=\"button-box\">\r\n        <button type=\"button\" className=\"button\" onClick={clearCellPuzzle}>\r\n          Clear Boards\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"button\"\r\n          onClick={morePictures}\r\n          disabled={disabled}\r\n        >\r\n          More Pictures\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nButtons.propTypes = {\r\n  perPage: PropTypes.number.isRequired,\r\n  clearCellPuzzle: PropTypes.func.isRequired,\r\n  morePictures: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Buttons\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport BoardShuffle from './BoardShuffle'\r\nimport Loader from '../Loader/Loader'\r\nimport BoardForPlay from './BoardForPlay'\r\nimport Buttons from '../Buttons/Buttons'\r\n\r\nclass PuzzleBoards extends React.Component {\r\n  render() {\r\n    const {\r\n      values,\r\n      takeCellImg,\r\n      dropCellImg,\r\n      takeCellGameBoard,\r\n      switchCellGameBoard,\r\n      clearCellPuzzle,\r\n      morePictures,\r\n    } = this.props\r\n\r\n    const shuffledSize = {\r\n      width: values.shuffleOptions.length <= 6 ? '600px' : '700px',\r\n      height: values.shuffleOptions.length <= 4 ? '200px' : '470px',\r\n    }\r\n\r\n    return (\r\n      <div className=\"container-boards\">\r\n        <div className=\"shuffled-puzzles\" style={shuffledSize}>\r\n          {values.targetURL ? (\r\n            values.shuffleOptions.map(option => (\r\n              <BoardShuffle\r\n                key={option.id}\r\n                id={option.id}\r\n                url={values.targetURL}\r\n                takeCell={takeCellImg}\r\n                options={option}\r\n              />\r\n            ))\r\n          ) : (\r\n            <div className=\"loader\">\r\n              <h2>Click on the picture to complete the puzzle</h2>\r\n              <Loader />\r\n            </div>\r\n          )}\r\n        </div>\r\n        {values.targetURL && (\r\n          <Buttons\r\n            perPage={values.perPage}\r\n            clearCellPuzzle={clearCellPuzzle}\r\n            morePictures={morePictures}\r\n          />\r\n        )}\r\n        {values.targetURL && (\r\n          <div>\r\n            <h2>Game board</h2>\r\n            <div className=\"board-for-play\">\r\n              {values.options.map(option => (\r\n                <BoardForPlay\r\n                  key={option.id}\r\n                  id={option.id}\r\n                  dropCell={dropCellImg}\r\n                  takeCell={takeCellGameBoard}\r\n                  switchCell={switchCellGameBoard}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nPuzzleBoards.propTypes = {\r\n  values: PropTypes.object.isRequired,\r\n  morePictures: PropTypes.func.isRequired,\r\n  takeCellImg: PropTypes.func.isRequired,\r\n  dropCellImg: PropTypes.func.isRequired,\r\n  takeCellGameBoard: PropTypes.func.isRequired,\r\n  switchCellGameBoard: PropTypes.func.isRequired,\r\n  clearCellPuzzle: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default PuzzleBoards\r\n","export default function shuffle(arr) {\r\n  let j, temp\r\n  const newArray = [...arr]\r\n\r\n  for (let i = newArray.length - 1; i > 0; i--) {\r\n    j = Math.floor(Math.random() * (i + 1))\r\n    temp = newArray[j]\r\n    newArray[j] = newArray[i]\r\n    newArray[i] = temp\r\n  }\r\n\r\n  return newArray\r\n}\r\n","export const options = [\r\n  {\r\n    id: 1,\r\n    item: {\r\n      position: 'top left',\r\n    },\r\n  },\r\n  {\r\n    id: 2,\r\n    item: {\r\n      position: 'top',\r\n    },\r\n  },\r\n  {\r\n    id: 3,\r\n    item: {\r\n      position: 'right top',\r\n    },\r\n  },\r\n  {\r\n    id: 4,\r\n    item: {\r\n      position: 'left',\r\n    },\r\n  },\r\n  {\r\n    id: 5,\r\n    item: {\r\n      position: 'center',\r\n    },\r\n  },\r\n  {\r\n    id: 6,\r\n    item: {\r\n      position: 'right',\r\n    },\r\n  },\r\n  {\r\n    id: 7,\r\n    item: {\r\n      position: 'bottom left',\r\n    },\r\n  },\r\n  {\r\n    id: 8,\r\n    item: {\r\n      position: 'bottom',\r\n    },\r\n  },\r\n  {\r\n    id: 9,\r\n    item: {\r\n      position: 'bottom right',\r\n    },\r\n  },\r\n]\r\n","import React from 'react'\r\n\r\nimport StickySlider from './componens/StickySlider/StickiSliders'\r\nimport PuzzleBoards from './componens/Puzzle/PuzzleBoards'\r\nimport shuffle from './utils/shuffle'\r\nimport { options } from './data/puzzleOptions'\r\nimport { key } from './data/api'\r\nimport Loader from './componens/Loader/Loader'\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super()\r\n\r\n    this.state = {\r\n      options,\r\n      shuffleOptions: [],\r\n      images: [],\r\n      perPage: 20,\r\n      targetURL: '',\r\n      switchId: 1,\r\n      active: false,\r\n      stylesCell: {},\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // setTimeout(this.getImages, 2000)\r\n    this.getImages()\r\n  }\r\n\r\n  componentDidUpdate(props, state) {\r\n    if (state.perPage !== this.state.perPage) {\r\n      this.getImages(this.state.perPage)\r\n    }\r\n  }\r\n\r\n  getImages = perPage => {\r\n    fetch(\r\n      `https://pixabay.com/api/?key=${key}&image_type=photo&per_page=${perPage}`\r\n    )\r\n      .then(response => response.json())\r\n      .then(json => json.hits)\r\n      .then(hits => {\r\n        const images = hits.map(hit => ({\r\n          id: hit.id,\r\n          tags: hit.tags,\r\n          url: hit.webformatURL,\r\n        }))\r\n\r\n        this.setState({ images })\r\n      })\r\n  }\r\n\r\n  morePictures = () => this.setState({ perPage: this.state.perPage + 20 })\r\n\r\n  changeImgOnClick = id => {\r\n    let targetURL = this.state.images.find(img => img.id === id).url\r\n    const values = {\r\n      shuffleOptions: shuffle(options),\r\n      targetURL: `url(${targetURL})`,\r\n    }\r\n\r\n    this.setState(values)\r\n  }\r\n\r\n  takeCellImg = (id, e) => {\r\n    const { backgroundPosition, backgroundImage } = e.target.style\r\n    const { active, shuffleOptions } = this.state\r\n\r\n    if (!active && backgroundImage) {\r\n      const stylesCell = {\r\n        position: backgroundPosition,\r\n        url: backgroundImage,\r\n      }\r\n\r\n      const options = shuffleOptions.filter(item => item.id !== id)\r\n      const values = { stylesCell, shuffleOptions: options, active: true }\r\n\r\n      this.setState(values)\r\n    }\r\n  }\r\n\r\n  dropCellImg = e => {\r\n    const style = e.target.style\r\n    const {\r\n      active,\r\n      stylesCell: { position, url },\r\n    } = this.state\r\n\r\n    if (active && !style.backgroundImage) {\r\n      style.backgroundPosition = position\r\n      style.backgroundImage = url\r\n\r\n      this.setState({ active: false })\r\n    }\r\n  }\r\n\r\n  takeCellGameBoard = (id, e) => {\r\n    e.preventDefault()\r\n\r\n    this.setState({ switchId: id })\r\n  }\r\n\r\n  switchCellGameBoard = id => {\r\n    const { options, switchId } = this.state\r\n\r\n    if (id !== switchId) {\r\n      const switchOptions = options.map(option => {\r\n        if (option.id === id) return { ...option, id: switchId }\r\n        else if (option.id === switchId) return { ...option, id }\r\n        else return option\r\n      })\r\n\r\n      this.setState({ options: switchOptions })\r\n    }\r\n  }\r\n\r\n  clearCellPuzzle = () => {\r\n    setTimeout(() => {\r\n      const clearning = {\r\n        active: false,\r\n        stylesCell: {},\r\n        targetURL: '',\r\n      }\r\n      this.setState(clearning)\r\n    }, 200)\r\n  }\r\n\r\n  render() {\r\n    if (this.state.images.length) {\r\n      return (\r\n        <>\r\n          <StickySlider\r\n            images={this.state.images}\r\n            changeImg={this.changeImgOnClick}\r\n          />\r\n          <hr className=\"hr-horizontal-gradient\" />\r\n          <PuzzleBoards\r\n            values={this.state}\r\n            takeCellImg={this.takeCellImg}\r\n            dropCellImg={this.dropCellImg}\r\n            clearCellPuzzle={this.clearCellPuzzle}\r\n            takeCellGameBoard={this.takeCellGameBoard}\r\n            switchCellGameBoard={this.switchCellGameBoard}\r\n            morePictures={this.morePictures}\r\n          />\r\n        </>\r\n      )\r\n    } else\r\n      return (\r\n        <div className=\"preloader\">\r\n          <Loader />\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default App\r\n","export const key = '17518139-b73def73b5f5b784fdb869618'\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport './App.scss'\n\nimport * as serviceWorker from './serviceWorker'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}