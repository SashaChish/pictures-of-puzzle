{"version":3,"sources":["serviceWorker.js","componens/StickySlider/Slide.js","componens/StickySlider/Navigation.js","componens/StickySlider/StickiSliders.js","componens/Puzzle/BoardShuffle.js","componens/Loader/Loader.js","componens/Puzzle/BoardForPlay.js","componens/Buttons/Buttons.js","componens/Puzzle/PuzzleBoards.js","utils/shuffle.js","data/puzzleOptions.js","App.js","data/api.js","index.js"],"names":["Boolean","window","location","hostname","match","Slide","this","props","url","id","title","changeImg","className","onClick","bind","style","backgroundImage","React","Component","Navigation","start","current","end","type","StickySlider","goStart","swiperRef","swiper","slideTo","goCurrent","images","targetURL","currentIndex","findIndex","img","goEnd","groupEnd","length","createRef","slidesPerView","slidesPerGroup","spaceBetween","grabCursor","observer","effect","coverflowEffect","rotate","stretch","depth","modifier","slideShadows","pagination","el","navigation","nextEl","prevEl","ref","map","key","tags","split","BoardShuffle","position","options","item","takeCell","styles","backgroundPosition","Loader","BoardForPlay","fokus","e","preventDefault","target","border","outFokus","option","stylesCell","index","dropCell","switchCell","onMouseDown","onMouseUp","onMouseOver","onMouseOut","Buttons","perPage","clearCellPuzzle","morePictures","disabled","PuzzleBoards","values","takeCellImg","dropCellImg","takeCellGameBoard","switchCellGameBoard","shuffledSize","width","shuffleOptions","height","shuffle","arr","j","temp","newArray","i","Math","floor","random","initialOptions","App","getImages","fetch","then","response","json","hits","hit","webformatURL","setState","state","changeImgOnClick","find","clearStyles","targetCell","filter","targetStyle","updateOptions","switchIndex","clearCellPuzzleBoards","setTimeout","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b81a82aa.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Slide extends React.Component {\r\n  render() {\r\n    const { url, id, title, changeImg } = this.props\r\n\r\n    if (url) {\r\n      return (\r\n        <div className=\"container-sticky-slider\">\r\n          <div\r\n            className=\"content-sticky-slider\"\r\n            onClick={changeImg.bind(null, id)}\r\n            style={{ backgroundImage: `url(${url})` }}\r\n          />\r\n          <div className=\"footer-sticky-slider\">{title}</div>\r\n        </div>\r\n      )\r\n    } else return\r\n  }\r\n}\r\n\r\nSlide.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n  id: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  changeImg: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Slide\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction Navigation(props) {\r\n  const { start, current, end } = props\r\n\r\n  return (\r\n    <div className=\"swiper-button-container\">\r\n      <button type=\"button\" className=\"button-swiper\" onClick={start}>\r\n        Start\r\n      </button>\r\n      <button type=\"button\" className=\"button-swiper\" onClick={current}>\r\n        Current\r\n      </button>\r\n      <button type=\"button\" className=\"button-swiper\" onClick={end}>\r\n        End\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nNavigation.propTypes = {\r\n  start: PropTypes.func.isRequired,\r\n  current: PropTypes.func.isRequired,\r\n  end: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Navigation","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Swiper from 'react-id-swiper'\r\nimport Slide from './Slide'\r\nimport Navigation from './Navigation'\r\nimport 'swiper//css/swiper.css'\r\n\r\nclass StickySlider extends React.Component {\r\n  constructor() {\r\n    super()\r\n\r\n    this.swiperRef = React.createRef()\r\n  }\r\n\r\n  goStart = () => {\r\n    const { current } = this.swiperRef\r\n    const groupStart = 0\r\n\r\n    current.swiper.slideTo(groupStart, 1000)\r\n  }\r\n\r\n  goCurrent = () => {\r\n    const { images, targetURL } = this.props\r\n    const { current } = this.swiperRef\r\n\r\n    const currentIndex = images.findIndex(img => img.url === targetURL)\r\n\r\n    if (currentIndex !== -1) current.swiper.slideTo(currentIndex - 1, 1000)\r\n  }\r\n\r\n  goEnd = () => {\r\n    const { current } = this.swiperRef\r\n    const groupEnd = this.props.images.length\r\n\r\n    current.swiper.slideTo(groupEnd, 1000)\r\n  }\r\n\r\n  render() {\r\n    const { images, changeImg } = this.props\r\n\r\n    const params = {\r\n      slidesPerView: 4,\r\n      slidesPerGroup: 2,\r\n      spaceBetween: 40,\r\n      grabCursor: true,\r\n      observer: true,\r\n      effect: 'coverflow',\r\n      coverflowEffect: {\r\n        rotate: 40,\r\n        stretch: 10,\r\n        depth: 150,\r\n        modifier: 1,\r\n        slideShadows: false,\r\n      },\r\n      pagination: {\r\n        el: '.swiper-pagination',\r\n        type: 'fraction',\r\n      },\r\n      navigation: {\r\n        nextEl: '.swiper-button-next.swiper-button-black',\r\n        prevEl: '.swiper-button-prev.swiper-button-black',\r\n      },\r\n    }\r\n\r\n    return (\r\n      <div className=\"margin-top\">\r\n        <Swiper {...params} ref={this.swiperRef}>\r\n          {images.map(img => (\r\n            <div key={img.id}>\r\n              <Slide\r\n                url={img.url}\r\n                title={img.tags.split(',')[0]}\r\n                id={img.id}\r\n                changeImg={changeImg}\r\n              ></Slide>\r\n            </div>\r\n          ))}\r\n        </Swiper>\r\n        <Navigation\r\n          start={this.goStart}\r\n          current={this.goCurrent}\r\n          end={this.goEnd}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nStickySlider.propTypes = {\r\n  images: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  changeImg: PropTypes.func.isRequired,\r\n  targetURL: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default StickySlider\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass BoardShuffle extends React.Component {\r\n\r\n  render() {\r\n    const {\r\n      url,\r\n      id,\r\n      options: {\r\n        item: { position },\r\n      },\r\n      takeCell,\r\n    } = this.props\r\n\r\n    const styles = {\r\n      backgroundImage: `url(${url})`,\r\n      backgroundPosition: position,\r\n    }\r\n\r\n    return (\r\n      <div className=\"cell\" \r\n      style={styles} \r\n      onClick={takeCell.bind(null, id)} \r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nBoardShuffle.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n  id: PropTypes.number.isRequired,\r\n  position: PropTypes.string,\r\n  takeCell: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default BoardShuffle\r\n","import React from 'react'\r\n\r\nfunction Loader() {\r\n  return (\r\n    <div className=\"lds-ripple\">\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass BoardForPlay extends React.Component {\r\n\r\n  fokus = e => {\r\n    e.preventDefault()\r\n    e.target.style.border = '1px solid red'\r\n  }\r\n\r\n  outFokus = e => e.target.style.border = null\r\n\r\n  render() {\r\n    const { option: {id, stylesCell}, index, dropCell, takeCell, switchCell,} = this.props\r\n    \r\n    return (\r\n      <div\r\n        className=\"cell border\"\r\n        style={stylesCell}\r\n        onClick={dropCell.bind(null, id)}\r\n        onMouseDown={takeCell.bind(null, index)}\r\n        onMouseUp={switchCell.bind(null, index)}\r\n        onMouseOver={this.fokus}\r\n        onMouseOut={this.outFokus}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nBoardForPlay.propTypes = {\r\n  option: PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    item: PropTypes.object\r\n  }),\r\n  dropCell: PropTypes.func.isRequired,\r\n  takeCell: PropTypes.func.isRequired,\r\n  switchCell: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default BoardForPlay\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Buttons extends React.Component {\r\n  render() {\r\n    const { perPage, clearCellPuzzle, morePictures } = this.props\r\n\r\n    const disabled = perPage <= 100 ? false : true\r\n\r\n    return (\r\n      <div className=\"button-box\">\r\n        <button type=\"button\" className=\"button\" onClick={clearCellPuzzle}>\r\n          Clear Boards\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"button\"\r\n          onClick={morePictures}\r\n          disabled={disabled}\r\n        >\r\n          More Pictures\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nButtons.propTypes = {\r\n  perPage: PropTypes.number.isRequired,\r\n  clearCellPuzzle: PropTypes.func.isRequired,\r\n  morePictures: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Buttons\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport BoardShuffle from './BoardShuffle'\r\nimport Loader from '../Loader/Loader'\r\nimport BoardForPlay from './BoardForPlay'\r\nimport Buttons from '../Buttons/Buttons'\r\n\r\nclass PuzzleBoards extends React.Component {\r\n  render() {\r\n    const {\r\n      values,\r\n      takeCellImg,\r\n      dropCellImg,\r\n      takeCellGameBoard,\r\n      switchCellGameBoard,\r\n      clearCellPuzzle,\r\n      morePictures,\r\n    } = this.props\r\n\r\n    const shuffledSize = {\r\n      width: values.shuffleOptions.length <= 6 ? '600px' : '700px',\r\n      height: values.shuffleOptions.length <= 4 ? '200px' : '470px',\r\n    }\r\n\r\n    return (\r\n      <div className=\"container-boards\">\r\n        <div className=\"shuffled-puzzles\" style={shuffledSize}>\r\n          {values.targetURL ? (\r\n            values.shuffleOptions.map(option => (\r\n              <BoardShuffle\r\n                key={option.id}\r\n                id={option.id}\r\n                url={values.targetURL}\r\n                takeCell={takeCellImg}\r\n                options={option}\r\n              />\r\n            ))\r\n          ) : (\r\n            <div className=\"loader\">\r\n              <h2>Click on the picture to complete the puzzle</h2>\r\n              <Loader />\r\n            </div>\r\n          )}\r\n        </div>\r\n        {values.targetURL && (\r\n          <Buttons\r\n            perPage={values.perPage}\r\n            clearCellPuzzle={clearCellPuzzle}\r\n            morePictures={morePictures}\r\n          />\r\n        )}\r\n        {values.targetURL && (\r\n          <div>\r\n            <h2>Game board</h2>\r\n            <div className=\"board-for-play\">\r\n              {values.options.map((option, index) => (\r\n                <BoardForPlay\r\n                  url={values.targetURL}\r\n                  index={index}\r\n                  key={option.id}\r\n                  option={option}\r\n                  dropCell={dropCellImg}\r\n                  takeCell={takeCellGameBoard}\r\n                  switchCell={switchCellGameBoard}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nPuzzleBoards.propTypes = {\r\n  values: PropTypes.object.isRequired,\r\n  morePictures: PropTypes.func.isRequired,\r\n  takeCellImg: PropTypes.func.isRequired,\r\n  dropCellImg: PropTypes.func.isRequired,\r\n  takeCellGameBoard: PropTypes.func.isRequired,\r\n  switchCellGameBoard: PropTypes.func.isRequired,\r\n  clearCellPuzzle: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default PuzzleBoards\r\n","export default function shuffle(arr) {\r\n  let j, temp\r\n  const newArray = [...arr]\r\n\r\n  for (let i = newArray.length - 1; i > 0; i--) {\r\n    j = Math.floor(Math.random() * (i + 1))\r\n    temp = newArray[j]\r\n    newArray[j] = newArray[i]\r\n    newArray[i] = temp\r\n  }\r\n\r\n  return newArray\r\n}\r\n","export const initialOptions = [\r\n  {\r\n    id: 1,\r\n    item: {\r\n      position: 'top left',\r\n    },\r\n  },\r\n  {\r\n    id: 2,\r\n    item: {\r\n      position: 'top',\r\n    },\r\n  },\r\n  {\r\n    id: 3,\r\n    item: {\r\n      position: 'right top',\r\n    },\r\n  },\r\n  {\r\n    id: 4,\r\n    item: {\r\n      position: 'left',\r\n    },\r\n  },\r\n  {\r\n    id: 5,\r\n    item: {\r\n      position: 'center',\r\n    },\r\n  },\r\n  {\r\n    id: 6,\r\n    item: {\r\n      position: 'right',\r\n    },\r\n  },\r\n  {\r\n    id: 7,\r\n    item: {\r\n      position: 'bottom left',\r\n    },\r\n  },\r\n  {\r\n    id: 8,\r\n    item: {\r\n      position: 'bottom',\r\n    },\r\n  },\r\n  {\r\n    id: 9,\r\n    item: {\r\n      position: 'bottom right',\r\n    },\r\n  },\r\n]\r\n","import React from 'react'\r\n\r\nimport StickySlider from './componens/StickySlider/StickiSliders'\r\nimport PuzzleBoards from './componens/Puzzle/PuzzleBoards'\r\nimport shuffle from './utils/shuffle'\r\nimport { initialOptions } from './data/puzzleOptions'\r\nimport { key } from './data/api'\r\nimport Loader from './componens/Loader/Loader'\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super()\r\n\r\n    this.state = {\r\n      options: initialOptions,\r\n      shuffleOptions: [],\r\n      images: [],\r\n      perPage: 20,\r\n      targetURL: '',\r\n      switchIndex: 0,\r\n      targetCell: false,\r\n      stylesCell: {},\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(this.getImages, 2000)\r\n  }\r\n\r\n  componentDidUpdate(props, state) {\r\n    const { perPage } = this.state\r\n\r\n    if (state.perPage !== perPage) {\r\n      this.getImages(perPage)\r\n    }\r\n  }\r\n\r\n  getImages = perPage => {\r\n    fetch(\r\n      `https://pixabay.com/api/?key=${key}&image_type=photo&per_page=${perPage}`\r\n    )\r\n      .then(response => response.json())\r\n      .then(json => json.hits)\r\n      .then(hits => {\r\n        const images = hits.map(hit => ({\r\n          id: hit.id,\r\n          tags: hit.tags,\r\n          url: hit.webformatURL,\r\n        }))\r\n\r\n        this.setState({ images })\r\n      })\r\n  }\r\n\r\n  morePictures = () => this.setState({ perPage: this.state.perPage + 20 })\r\n\r\n  changeImgOnClick = id => {\r\n    const { images, options } = this.state\r\n\r\n    let target = images.find(img => img.id === id).url\r\n\r\n    const clearStyles = options.map(item => {\r\n      if (item.stylesCell) {\r\n        delete item.stylesCell\r\n        return item\r\n      }\r\n\r\n      return item\r\n    })\r\n\r\n    const values = {\r\n      shuffleOptions: shuffle(initialOptions),\r\n      options: clearStyles,\r\n      targetCell: false,\r\n      targetURL: target,\r\n    }\r\n\r\n    this.setState(values)\r\n  }\r\n\r\n  takeCellImg = (id, e) => {\r\n    const { backgroundPosition, backgroundImage } = e.target.style\r\n    const { targetCell, shuffleOptions } = this.state\r\n\r\n    if (!targetCell && backgroundImage) {\r\n      const stylesCell = {\r\n        backgroundPosition,\r\n        backgroundImage,\r\n      }\r\n\r\n      const shuffleOptionsUpdate = shuffleOptions.filter(item => item.id !== id)\r\n      const values = {\r\n        stylesCell,\r\n        shuffleOptions: shuffleOptionsUpdate,\r\n        targetCell: true,\r\n      }\r\n\r\n      this.setState(values)\r\n    }\r\n  }\r\n\r\n  dropCellImg = (id, e) => {\r\n    const targetStyle = e.target.style\r\n    const { options, targetCell, stylesCell } = this.state\r\n\r\n    if (targetCell && !targetStyle.backgroundImage) {\r\n      const updateOptions = options.map(item => {\r\n        if (item.id === id)\r\n          return {\r\n            ...item,\r\n            stylesCell,\r\n          }\r\n        else return item\r\n      })\r\n\r\n      this.setState({ targetCell: false, options: updateOptions })\r\n    }\r\n  }\r\n\r\n  takeCellGameBoard = (index, e) => {\r\n    e.preventDefault()\r\n\r\n    this.setState({ switchIndex: index })\r\n  }\r\n\r\n  switchCellGameBoard = index => {\r\n    const { options, switchIndex } = this.state\r\n\r\n    if (index !== switchIndex) {\r\n      const temp = options[index]\r\n      options[index] = options[switchIndex]\r\n      options[switchIndex] = temp\r\n\r\n      this.setState({ options })\r\n    }\r\n  }\r\n\r\n  clearCellPuzzleBoards = () => {\r\n    setTimeout(() => {\r\n      const clearning = {\r\n        targetCell: false,\r\n        stylesCell: {},\r\n        targetURL: '',\r\n      }\r\n      this.setState(clearning)\r\n    }, 200)\r\n  }\r\n\r\n  render() {\r\n    if (this.state.images.length) {\r\n      return (\r\n        <>\r\n          <StickySlider\r\n            images={this.state.images}\r\n            targetURL={this.state.targetURL}\r\n            changeImg={this.changeImgOnClick}\r\n          />\r\n          <hr className=\"hr-horizontal-gradient\" />\r\n          <PuzzleBoards\r\n            values={this.state}\r\n            takeCellImg={this.takeCellImg}\r\n            dropCellImg={this.dropCellImg}\r\n            clearCellPuzzle={this.clearCellPuzzleBoards}\r\n            takeCellGameBoard={this.takeCellGameBoard}\r\n            switchCellGameBoard={this.switchCellGameBoard}\r\n            morePictures={this.morePictures}\r\n          />\r\n        </>\r\n      )\r\n    } else\r\n      return (\r\n        <div className=\"preloader\">\r\n          <Loader />\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default App\r\n","export const key = '17518139-b73def73b5f5b784fdb869618'\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport './App.scss'\n\nimport * as serviceWorker from './serviceWorker'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}